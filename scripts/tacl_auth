#!/bin env python3

"""Script to perform 2FA and get a JWT in return."""

import os
import sys
import getpass

import click
import requests

try:
    from tsdapiclient.authapi import get_jwt_two_factor_auth as tsd_auth
except ImportError:
    from tsdapiclient.authapi import get_jwt_tsd_auth as tsd_auth
from tsdapiclient.client_config import ENV
from tsdapiclient.tools import _check_present, user_agent
from tsdapiclient.configurer import read_config
from tsdapiclient.tacl import get_api_key


requests.utils.default_user_agent = user_agent


HOME = os.path.expanduser('~')
JWT_CACHE = HOME + '/.tsd-s3cmd-token'


def print_auth_help():
    _help = """

        tacl_auth: helper script to perform 2FA
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

        Usage: tacl_auth [OPTIONS]

        Options
        ~~~~~~~

        Example
        ~~~~~~~
        tacl_auth --pnum p11 --user_name p11-name --password somepw \
            --otp 123456 --token_type import

    """
    print(_help)


@click.command()
@click.option('--interactive', is_flag=True, default=False, help='runs the authentication flow interactively')
@click.option('--env', default='test', help='which environment you want to interact with')
@click.option('--pnum', default=None, help='project numbers')
@click.option('--user_name', default=None, help='TSD project user name')
@click.option('--password', default=None, help='TSD password')
@click.option('--otp', default=None, help='one time passcode')
@click.option('--token_type', default=None, help='import, export, or admin')
@click.option('--guide', is_flag=True, default=False, help='print help text')
@click.option('--update_cache', is_flag=True, default=False, help='use token cache')
@click.option('--tsd_api_key', is_flag=True, default=False, help='use project specific TSD api key')
def main(interactive, env, pnum, user_name, password, otp, token_type, guide,
         update_cache, tsd_api_key):
    if guide:
        print_auth_help()
        return
    password = os.environ.get('TACL_PASSWORD', password)
    if interactive:
        user_name = raw_input('User name > ')
        password = getpass.getpass('Password > ')
        otp = raw_input('OTP > ')
        env = raw_input('API environment: test, prod or alt > ')
        token_type = 'export'
        pnum = user_name.split('-')[0]
    if env not in ['test', 'prod', 'alt']:
        print('unknown env')
        sys.exit(1)
    _check_present(env, 'env')
    _check_present(pnum, 'pnum')
    try:
        api_key = get_api_key(env=env, pnum=pnum)
    except Exception as e:
        print('Authentication failed')
        return
    if user_name and password and otp and token_type:
        jwt = tsd_auth(env, pnum, api_key, user_name, password, otp, token_type)
        if isinstance(jwt, tuple):
            jwt = jwt[0]
        if update_cache and jwt:
            with open(JWT_CACHE, 'w') as f:
                f.write(jwt)
            sys.exit(0)
        print(jwt)
        sys.exit(0)
    else:
        print('not enough credential input to do auth')
        sys.exit(1)


if __name__ == '__main__':
    main()
